Document: {
	header(DocumentHeader): {,
	},
	body(DocumentBody): {
		ElementNode: {
			name: html,
			type: Normal,
			children: [
				ElementNode: {
					name: head,
					type: Normal,
					children: [
						ElementNode: {
							name: title,
							type: Normal,
							children: [
								TextNode: {
									textValue: Sample,
								}
							],
							attributes: [],
						},
					],
					attributes: [],
				},
				ElementNode: {
					name: body,
					type: Normal,
					children: [
						CommentNode: {
							comment: <!--
						<div id="some-id" cp-show='x.var1[1] == "HI MAn" && axr == 5'>hi man</div>
						<div id="some-id2" cp-hide='myTest == "HI MAn"'>hi man2</div>
						
						<input id="myTestInput" type="text" cp-model="x.var1[1]" />
						<input id="myTestInput2" type="text" cp-model="x.var2" />
						<input id="myTestInput3" type="text" cp-model="myTest" />
						<input id="myTestInput4" type="text" cp-model="y[6]" />
						<input id="myTestInput3" type="text" cp-model="myTest" />
						
						<p id="myTestInput3">this is my text: {{myTest}} and some text {{x.var1[1]}}</p>
						<p id="myTestInput3">{{myTest}}</p> -->,
							type: Normal,
						},
						ElementNode: {
							name: p,
							type: Normal,
							children: [
								MustachNode: {
									Exp(TernaryConditionalExpression): {
										firstOprand(LessThanComparisionExpression): {
											leftOprand(FunctionCallExpression): {
												function(ReferenceExpression): {
													reference: result,
												},
											},
											rightOprand(NumberLiteral): {
												value: 20.0,
											},
										},
										secondOprand(PostDecrementExpression): {},
										thirdOprand(PostDecrementExpression): {},
									},
								}
							],
							attributes: [
								AttributeNode: {
									attribute: id,
									value: "myTestInput3",
								}
							],
						},
					],
					attributes: [],
				},
			],
			attributes: [
				Directive: {
					type: cp-app,
					value(ReferenceExpression): {
						reference: forthyear,
					},
				}
			],
		},,
		CommentNode: {
			comment: <!-- it's already there -->,
			type: Normal,
		},,
		ScriptNode: {
			content: <script>
		    function forthyear (){
		        this.axr = 25;
		        this.myTest = "HI MAn";
		
		        this.x = 12;
		
		        this.y = ["hi","hello",5];
		
		        this.result = function(){
		            return 25;
		        }
		
		    };
		
		    var forthyear = new forthyear();
		
		</script>,
		},
	},
}